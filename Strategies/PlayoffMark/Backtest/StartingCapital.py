import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import expon
import datetime


'''
Author: Jonathan Chow
Date Modified: 2019-08-11
Python Version: 3.7

The aim of this program is to calculate the starting capital required to run the Markov playoff strategy. It iterates
though the backtest wagers (generated by MarkovBacktest.py) and generates non-overlapping subsequences of wagers
with initial loss but positive sum. We then take the cumulative sum of each subsequence and the minimum of those values.
The thinking is that, starting at 0, this value represents the maximum loss required to return to 0.

We then produce a histogram of these maximum losses. We fit a distribution and select a reasonable starting capital
that minimizes the probability of ruin.

The histogram contains few values. Possibly attempt to artificially generate more data. Not sure how to select starting
capital given histogram and distribution. Is it sufficient to start with any value greater than the max loss before
break even?
'''

if __name__ == '__main__':
    print(str(datetime.datetime.now()) + ': Started')

    with open('Analysis/HistoricalPerformanceRaw.csv', mode='r') as dataFile:
        backtest = pd.read_csv(dataFile, encoding='utf-8', index_col=0)
        backtest.index = backtest.index.astype(str)

    wagers = backtest['WagerReturns']
    maxLosses = []
    cumSum = 0
    losses = []

    for wagerIndex in range(0, len(wagers)):
        losses += [wagers[wagerIndex]]
        cumSum += wagers[wagerIndex]

        if cumSum >= 0:
            losses = np.cumsum(losses)
            maxLosses += [min(losses)]

            losses = []
            cumSum = 0

    maxLosses = [abs(loss) for loss in maxLosses if loss < 0]

    P = expon.fit(maxLosses)

    # Plot histogram of losses
    plt.figure(figsize=(10, 5))
    plt.hist(maxLosses, bins=30, edgecolor='black', linewidth=1, density=True)

    xmin, xmax = plt.xlim()
    rX = np.linspace(xmin, xmax, 100)
    rP = expon.pdf(rX, *P)
    plt.plot(rX, rP)

    plt.xlabel('Loss Before Break Even')
    plt.ylabel('Frequency')
    plt.title('Histogram of Loss Before Break Even (2009-2018)')

    plt.savefig('Analysis/LossBeforeBreakEven.png', dpi=500)

    print(maxLosses)

    print(str(datetime.datetime.now()) + ': Finished')
