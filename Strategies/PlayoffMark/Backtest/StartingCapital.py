import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import expon
import datetime


'''
Author: Jonathan Chow
Date Modified: 2019-08-11
Python Version: 3.7

The aim of this program is to calculate the starting capital required to run the Markov playoff strategy. It iterates
though the backtest wagers (generated by MarkovBacktest.py) and generates non-overlapping subsequences of wagers
with initial loss but positive sum. We then take the cumulative sum of each subsequence and the minimum of those values.
The thinking is that, starting at 0, this value represents the maximum loss required to return to 0.

We then produce a histogram of these "maximum loss before break even". We fit an exponential distribution on the
histogram.

Over our backtest of 10 years, we generate s subsequences. If we choose to begin with $N, our probability of
ruin < 1 - P(max loss before break even < N)^s. We heuristically select a starting capital such that this value is low.

There are multiple issues with this analysis:
    1) Empirically, there are 28 subsequences of losses. This is a very small sample which under-represents large
    losses.
    2) The calculation provides an upper bound but not an exact probability. If the expected return is positive, we
    would expect to be able to lose without ruin as time goes on.
'''

if __name__ == '__main__':
    print(str(datetime.datetime.now()) + ': Started')

    with open('Analysis/HistoricalPerformanceRaw.csv', mode='r') as dataFile:
        backtest = pd.read_csv(dataFile, encoding='utf-8', index_col=0)
        backtest.index = backtest.index.astype(str)

    wagers = backtest['WagerReturns']
    maxLosses = []
    cumSum = 0
    losses = []

    for wagerIndex in range(0, len(wagers)):
        losses += [wagers[wagerIndex]]
        cumSum += wagers[wagerIndex]

        if cumSum >= 0:
            losses = np.cumsum(losses)
            maxLosses += [min(losses)]

            losses = []
            cumSum = 0

    maxLosses = [abs(loss) for loss in maxLosses if loss < 0]

    P = expon.fit(maxLosses)

    print(maxLosses)
    print('Location: ' + str(P[0]))
    print('Scale: ' + str(P[1]))

    startingCapital = 6000
    pRuin = 1 - np.power(expon.cdf(startingCapital, *P), len(maxLosses))

    # Plot histogram of losses
    plt.figure(figsize=(10, 5))
    plt.hist(maxLosses, bins=30, edgecolor='black', density=True)

    xmin, xmax = plt.xlim()
    rX = np.linspace(xmin, xmax, 100)
    rP = expon.pdf(rX, *P)
    plt.plot(rX, rP, color='black')

    plt.xlabel('Notional Loss Before Break Even (CAD $)')
    plt.ylabel('Probability (%)')
    plt.title('Histogram of Loss Before Break Even (2009-2018)\nP(ruin) < {:.3} with Starting Notional = {}'.format(pRuin, startingCapital))

    plt.savefig('Analysis/LossBeforeBreakEven.png', dpi=500)

    print(str(datetime.datetime.now()) + ': Finished')
